// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: blog.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Blog_ServiceClient is the client API for Blog_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Blog_ServiceClient interface {
	Create_One_Blog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*BlogId, error)
	// rpc Create_Multiple_Blog (stream Blog) returns (stream BlogId);
	Read_One_Blog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*Blog, error)
	Real_All_Blog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Blog_Service_Real_All_BlogClient, error)
	Update_One_Blog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete_One_Blog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type blog_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlog_ServiceClient(cc grpc.ClientConnInterface) Blog_ServiceClient {
	return &blog_ServiceClient{cc}
}

func (c *blog_ServiceClient) Create_One_Blog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*BlogId, error) {
	out := new(BlogId)
	err := c.cc.Invoke(ctx, "/blog.Blog_Service/Create_One_Blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blog_ServiceClient) Read_One_Blog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*Blog, error) {
	out := new(Blog)
	err := c.cc.Invoke(ctx, "/blog.Blog_Service/Read_One_Blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blog_ServiceClient) Real_All_Blog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Blog_Service_Real_All_BlogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blog_Service_ServiceDesc.Streams[0], "/blog.Blog_Service/Real_All_Blog", opts...)
	if err != nil {
		return nil, err
	}
	x := &blog_ServiceReal_All_BlogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blog_Service_Real_All_BlogClient interface {
	Recv() (*Blog, error)
	grpc.ClientStream
}

type blog_ServiceReal_All_BlogClient struct {
	grpc.ClientStream
}

func (x *blog_ServiceReal_All_BlogClient) Recv() (*Blog, error) {
	m := new(Blog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blog_ServiceClient) Update_One_Blog(ctx context.Context, in *Blog, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blog.Blog_Service/Update_One_Blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blog_ServiceClient) Delete_One_Blog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/blog.Blog_Service/Delete_One_Blog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Blog_ServiceServer is the server API for Blog_Service service.
// All implementations must embed UnimplementedBlog_ServiceServer
// for forward compatibility
type Blog_ServiceServer interface {
	Create_One_Blog(context.Context, *Blog) (*BlogId, error)
	// rpc Create_Multiple_Blog (stream Blog) returns (stream BlogId);
	Read_One_Blog(context.Context, *BlogId) (*Blog, error)
	Real_All_Blog(*emptypb.Empty, Blog_Service_Real_All_BlogServer) error
	Update_One_Blog(context.Context, *Blog) (*emptypb.Empty, error)
	Delete_One_Blog(context.Context, *BlogId) (*emptypb.Empty, error)
	mustEmbedUnimplementedBlog_ServiceServer()
}

// UnimplementedBlog_ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlog_ServiceServer struct {
}

func (UnimplementedBlog_ServiceServer) Create_One_Blog(context.Context, *Blog) (*BlogId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create_One_Blog not implemented")
}
func (UnimplementedBlog_ServiceServer) Read_One_Blog(context.Context, *BlogId) (*Blog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read_One_Blog not implemented")
}
func (UnimplementedBlog_ServiceServer) Real_All_Blog(*emptypb.Empty, Blog_Service_Real_All_BlogServer) error {
	return status.Errorf(codes.Unimplemented, "method Real_All_Blog not implemented")
}
func (UnimplementedBlog_ServiceServer) Update_One_Blog(context.Context, *Blog) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update_One_Blog not implemented")
}
func (UnimplementedBlog_ServiceServer) Delete_One_Blog(context.Context, *BlogId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete_One_Blog not implemented")
}
func (UnimplementedBlog_ServiceServer) mustEmbedUnimplementedBlog_ServiceServer() {}

// UnsafeBlog_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Blog_ServiceServer will
// result in compilation errors.
type UnsafeBlog_ServiceServer interface {
	mustEmbedUnimplementedBlog_ServiceServer()
}

func RegisterBlog_ServiceServer(s grpc.ServiceRegistrar, srv Blog_ServiceServer) {
	s.RegisterService(&Blog_Service_ServiceDesc, srv)
}

func _Blog_Service_Create_One_Blog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blog_ServiceServer).Create_One_Blog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog_Service/Create_One_Blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blog_ServiceServer).Create_One_Blog(ctx, req.(*Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_Service_Read_One_Blog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blog_ServiceServer).Read_One_Blog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog_Service/Read_One_Blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blog_ServiceServer).Read_One_Blog(ctx, req.(*BlogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_Service_Real_All_Blog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Blog_ServiceServer).Real_All_Blog(m, &blog_ServiceReal_All_BlogServer{stream})
}

type Blog_Service_Real_All_BlogServer interface {
	Send(*Blog) error
	grpc.ServerStream
}

type blog_ServiceReal_All_BlogServer struct {
	grpc.ServerStream
}

func (x *blog_ServiceReal_All_BlogServer) Send(m *Blog) error {
	return x.ServerStream.SendMsg(m)
}

func _Blog_Service_Update_One_Blog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blog_ServiceServer).Update_One_Blog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog_Service/Update_One_Blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blog_ServiceServer).Update_One_Blog(ctx, req.(*Blog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_Service_Delete_One_Blog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Blog_ServiceServer).Delete_One_Blog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.Blog_Service/Delete_One_Blog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Blog_ServiceServer).Delete_One_Blog(ctx, req.(*BlogId))
	}
	return interceptor(ctx, in, info, handler)
}

// Blog_Service_ServiceDesc is the grpc.ServiceDesc for Blog_Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blog_Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.Blog_Service",
	HandlerType: (*Blog_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create_One_Blog",
			Handler:    _Blog_Service_Create_One_Blog_Handler,
		},
		{
			MethodName: "Read_One_Blog",
			Handler:    _Blog_Service_Read_One_Blog_Handler,
		},
		{
			MethodName: "Update_One_Blog",
			Handler:    _Blog_Service_Update_One_Blog_Handler,
		},
		{
			MethodName: "Delete_One_Blog",
			Handler:    _Blog_Service_Delete_One_Blog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Real_All_Blog",
			Handler:       _Blog_Service_Real_All_Blog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blog.proto",
}
